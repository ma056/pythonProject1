#!/usr/bin/env python
# -*- coding: UTF-8 -*-
'''
@Author  ：wma
@Date    ：2022/9/27 5:20 PM 
@process    :
@change :
'''
## https://www.jianshu.com/p/743220bad3e5


import re

source = '<html><head><title>Title</title>'
import re

# 注意多出的问号
p = re.compile(r'<.*?>')
# print(p.findall(source))
# print(re.findall(r'<.*?>', source))

# 1.1 re.compile
# compile:re.compile是将正则表达式转换为模式对象，这样可以更有效率匹配。使用compile转换一次之后，以后每次使用模式时就不用进行转换
# pattern：写正则表达式
# flags：匹配模式
# 从compile()函数的定义中，可以看出返回的是一个匹配对象，它单独使用就没有任何意义，需要和findall(), search(), match(）搭配使用。compile()与findall()一起使用，返回一个列表。eg：
# eg:
# (1)compile配合findall
a = '0355-67796666'
b = re.compile(r'\d+-\d{8}')
r = re.findall(b, a)  # 等同于： r = b.findall(a)
print(r)
# (2)直接使用findall
# Findall是匹配出字符串中所有跟指定值有关的值，并且以列表的形式返回。未匹配到则返回一个空的列表。匹配出指定字符的所有值，并以列表返回值。
a = '0355-67796666'
r = re.findall(r'\d+-\d{8}', a)
print(r)

# (3)compile配合search
# Search与match有些类似，只是搜索整个字符串然后第一个匹配到指定的字符则返回值，未匹配到则返回None。获取值得方
# 法也需要通过group()
# 从字符串开始往后匹配，一匹配到则返回一个对象。需要通过group来获取匹配到的值。
a = 'A83C72D1D8E67'
r = re.search('\d', a)
print(r)
print(r.group())

# (4)compile配合match
# match从字符串的第一个字符开始匹配，如果未匹配到返回None，匹配到则返回一个对象
# match判断正则表达式是否从开始处（首字母）匹配一个字符串，例如第一个不是\d(数字)，返回None
aa = 'a83C72D1D8E67'
rr = re.match('\d', aa)
print(rr)  # 返回对象所在位置
# print(rr.group())# 返回找到的结果，例如8 报错了
# print(rr.span())  # 返回一个元组表示匹配位置（开始，结束）


# 二、简单的模式：字符匹配
'''
元字符                         描述
.                             句号匹配任意单个字符除了换行符
[]                            字符种类，匹配方括号内的任意字符，中括号内每个字符是或(or)的关系
[^]                           否定的字符种类，匹配除了方括号里的任意字符
*                             匹配0次或无限次，重复在*号之前的字符
+                             匹配1次或无限次，重复在+号之前的字符
?                             匹配0次或1次，重复在?号之前的字符
{n,m}                         匹配num个大括号之前的字符（n<=num<=m）
(xyz)                         字符集又称做组，匹配与xyz完全相等的字符串，每个字符是且(and)的关系
|                             或运算符，匹配符号前或后的字符
\                             转义字符，用于匹配一些保留字符 [ ]、( )、{ }、. 、* 、+ 、? 、^ 、$、\、|
^                             从字符串开始位置开始匹配
$                             从字符串末端开始匹配
'''
# 反斜杠后面跟普通字符实现特殊功能
'''
特殊字符                         描述
\d                              匹配数字，相当于[0-9]
\D                              不匹配数字，相当于[^0-9]
\s                              匹配空白字符(包括空格、换行符、制表符等)，相当于 [\t\n\r\f\v]
\S                              与\s相反，相当于 [^\t\n\r\f\v]
\w                              匹配中文，下划线，数字，英文，相当于[a-zA-z0-9_]
\W                              与\w相反，匹配特殊字符，如$、&、空格、\n、\t等
\b                              匹配单词的开始或结束
\B                              与\b相反
'''
# 2.1元字符
a = '孙悟空7猪八戒6沙和尚3唐僧6白龙马'
# 字符串a中所有的数字，返回['7', '6', '3', '6']
r = re.findall('[0-9]', a)
# 提取字符串a中所有非数字，返回：['孙', '悟', '空', '猪', '八', '戒', '沙', '和', '尚', '唐', '僧', '白', '龙', '马']
r1 = re.findall('[^0-9]', a)

a1 = 'xyz,xcz,xfz,xdz,xaz,xez'
# 找到字符串中间字母是d或e的单词，返回：['xdz', 'xez']
r2 = re.findall('x[de]z', a1)
# 找到字符串中间字母是d或e或f的单词，返回：['xfz', 'xdz', 'xez']
r3 = re.findall('x[d-f]z', a1)

# 2.2概括字符集
a2 = 'Excel 12345Word\n23456_PPT12lr'
# \w 可以提取中文，英文，数字和下划线，不能提取特殊字符
r4 = re.findall('\w', a2)
# \W 提取特殊字符、空格、\n、\t等
r5 = re.findall('\W', a2)
# 2.3数量词
a3 = 'Excel 12345Word23456PPT12Lr'
# 提取大小写字母混合的单词,输出['Excel', 'Word']{4,5}是单词个数在4-5
r6 = re.findall('[a-zA-Z]{3,5}', a3)
# 贪婪与非贪婪【Python默认使用贪婪模式】
# 贪婪：'[a-zA-Z]{3,5}'
# 先找三个连续的字母，最多找到5个连续的字母后停止。在3个以后且5个以内发现了不是子母的也停止。
# 非贪婪：'[a-zA-Z]{3,5}?'或'[a-zA-Z]{3}'建议使用后者，不要使用?号，否则你会与下面的?号混淆
r7 = re.findall('[a-zA-Z]{3}', a3)
# 输出：['Exc', 'Wor', 'PPT']
# print(r6)

a4 = 'exce0excell3excel3'
r8 = re.findall('excel+', a4)
r9 = re.findall('excel?', a4)
# print(r9)

# 2.4边界匹配^和$
# 限制电话号码的位置必需是8-11位才能提取
tel = '13811115888'
r10 = re.findall('^\d{8,11}$', tel)
# print(r10)

# 2.5组( )
# 将abc打成一个组，{2}指的是重复几次，匹配abcabc
a5 = 'abcabcabcxyzabcabcxyzabc'
r11 = re.findall('(abc){2}', a5)
print(r11)

# 2.6匹配模式参数
a6 = 'abcFBI\nabcCIAabc'
r12 = re.findall('fbi.{1}', a6, re.I | re.S)
# re.I忽略大小写，re.S匹配字符， 匹配fbi然后匹配任意一个字符包括\n
'''
1).re.I(re.IGNORECASE): 忽略大小写
2).re.M(MULTILINE): 多行模式，改变’^’和’$’的行为
3).re.S(DOTALL): 点任意匹配模式，改变’.’的行为
4).re.L(LOCALE): 使预定字符类\w \W \b \B \s \S 取决于当前区域设定
5).re.U(UNICODE): 使预定字符类\w \W \b \B \s \S \d \D 取决于unicode定义的字符属性
6).re.X(VERBOSE): 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释
'''

# 2.7re.sub替换字符
# 把FBI替换成BBQ，第4参数写1，证明只替换第一次，默认是0（无限替换）
a7 = 'abcFBIabcFBIaFBICIAabc'
r13 = re.sub('FBI', 'BBQ', a7, 1)
# print(r13)
# 拓展知识
aaa = 'abcFBIabcFBIaFBICIAabc'


def 函数名(形参):
    pass


rrr = re.sub('FBI', 函数名, aaa, 1)
# print(rrr)
# 分析：如果找到了FBI这个子串，会将FBI当成参数传到形参中，pass是什么都没返回，所以FBI被空字符串代替了。
# 2.8把函数做为参数传递
a8 = 'C52730A52730D52730'


def func1(aa):
    print(aa)
    lines = aa.group()
    print(lines)
    if int(lines) >= 5:
        return '9'
    else:
        return '0'


r14 = re.sub('\d', func1, a8)
print(r14)

# 2.9group分组
a = "123abc456"
print(re.search("([0-9]*)([a-z]*)([0-9]*)", a).group(0))  # 123abc456,返回整体
print(re.search("([0-9]*)([a-z]*)([0-9]*)", a).group(1))  # 123
print(re.search("([0-9]*)([a-z]*)([0-9]*)", a).group(2))  # abc
print(re.search("([0-9]*)([a-z]*)([0-9]*)", a).group(3))  # 456
'''
1. 正则表达式中的三组括号把匹配结果分成三组
group() 同group0）就是匹配正则表达式整体结果
group(1) 列出第一个括号匹配部分，
group(2) 列出第二个括号匹配部分，
group(3) 列出第三个括号匹配部分。
2. 没有匹配成功的，re.search（）返回None
3. 当然正则表达式中没有括号，group(1)肯定不对了。
'''

# 附1：正则表达式基础语法
'''
^       指出一个字符串的开始
$       指出一个字符串的结束
\       将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符
^abc    匹配所有以 "abc" 开始的字符串（例如："abc"，"abccba"）
abc$    匹配所有以"abc" 结尾的字符串（例如："gggabc"，"reddcba"）
^abc$   匹配开始和结尾都为"abc"的字符串（例如："abc"）
abc     没有任何字符，匹配任何包含"abc"的字符串（例如："aaaabccc"，"abc123"）
n       匹配n "\n"：匹配换行符 "\/"这里是\he / 连在一起写，匹配 " / " 字符
'''

'''
*       匹配前面的子表达式零次或多次
+       匹配前面的子表达式一次或多次
?       匹配前面的子表达式零次或一次
ac*     匹配字符串其中一个a后面跟着零个或若干个c （例如："accc"，"abbb"）
ac+     匹配字符串其中一个a后面跟着至少一个c或者多个（例如："ac"，"acccccccc"）
ac?     匹配字符串其中一个a后面跟着零个或者一个c （例如："a"，"ac"）
a?c+$   匹配字符串的末尾有零个或一个a跟着一个或多个c（例如："ac"，"acccccc"，''c''，"ccccccc"）
'''

'''
{n}          n为非负整数，匹配n次
{n，}        n为非负整数，匹配至少n次
{n，m}       n，m为非负整数，最少匹配n次 最多匹配m次
ab{3}       表示一个字符串有一个a后面跟随2个b（例如："abb"，"abbbbb"）
ab{3,}      表示一个字符串有一个a后面跟随至少2个b （例如："abb"，"abbb"）
ab{3,6}     表示一个字符串有一个a后面跟随3到6个b（例如："abbb"，"abbbb"，"abbbb"）
'''

'''
|           表示"或"
.           表示任何字符
a|b         表示一个字符串里有 a 或者 b（例如："a"，"b"，"ab"，"abc"）
a.          表示一个字符串有一个 a 后面跟着一个任意字符（例如："a1"，"a456"，"avv"）
'''

# 附2：方括号里用"^"表示不希望出现的字符
'''
[abc]       表示字符集合，表示一个字符串有一个"a"或"b"或"c" 等价于 [z|b|c]
[^abc]      表示一个字符串中不应该出现abc，即是匹配未包含改集合的任意字符
[a-z]       表示一个字符串中存在一个a和z之间的所有字母
[0-9]       表示一个字符串中存在一个0和9之间的所有数字
[^a-z]      表示一个字符串中不应该出现a到z之间的任意一个字母
^[a-zA-Z]   表示一个字符串中以字母开头
[0-9]%      表示一个百分号前有一个的数字；
'''

# 附3：由字符'\'和另一个字符组成特殊含义
'''
\d          匹配一个数字字符，等价[0-9]
\D          匹配一个非数字字符，等价[^0-9]
\f          匹配一个换页符，等价\x0c和\cL
\n          匹配一个换行符。等价于\x0a和\cJ
\r          匹配一个回车符。等价于\x0d和\cM
\s          匹配任何空白字符，包括空格、制表符、换页符等等。等价于[\f\n\r\t\v]
\S          匹配任何非空白字符。等价于[^\f\n\r\t\v]
\t          匹配一个制表符。等价于\x09和\cI
\v          匹配一个垂直制表符。等价于\x0b和\cK
\w          匹配包括下划线的任何单词字符。等价于“[A-Za-z0-9_]”
\W          匹配任何非单词字符。等价于“[^A-Za-z0-9_]”
'''

# 附6：常用正则表达式
# 6.1检验数字的表达式
'''
数字                                   ^[0-9]$
n位的数字                               ^\d{n}$
至少n位的数字                            ^\d{n,}$
m-n位的数字                             ^\d{m,n}$
零和非零开头的数字                        ^(0|[1-9][0-9]*)$
非零开头的最多带两位小数的数字              ^([1-9][0-9]*)+(.[0-9]{1,2})?$
带1-2位小数的正数或负数                   ^(\-)?\d+(\.\d{1,2})?$
正数、负数、和小数                        ^(\-|\+)?\d+(\.\d+)?$
有两位小数的正实数                        ^[0-9]+(.[0-9]{2})?$
有1~3位小数的正实数                       ^[0-9]+(.[0-9]{1,3})?$
非零的正整数                             ^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\+?[1-9][0-9]*$
非零的负整数                             ^\-[1-9][]0-9"*$ 或 ^-[1-9]\d*$
非负整数                                 ^\d+$ 或 ^[1-9]\d*|0$
非正整数                                 ^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$
非负浮点数                               ^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$
非正浮点数                               ^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$
正浮点数                                 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$
负浮点数                                 ^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$
浮点数                                   ^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$
'''
# 附6.2校验字符的表达式
'''
汉字                                                  ^[\u4e00 -\u9fa5]{0, }$
英文和数字                                               ^[A - Za - z0 -9] +$ 或 ^ [A- Za - z0 - 9]{4, 40}$
长度为3-20的所有字符                                        ^.{3, 20}$
由26个英文字母组成的字符串                                      ^[A - Za - z] +$
由26个大写英文字母组成的字符串                                    ^[A - Z] +$
由26个小写英文字母组成的字符串                                    ^[a - z] +$
由数字和26个英文字母组成的字符串                                   ^[A - Za - z0 - 9] +$
由数字、26个英文字母或者下划线组成的字符串                          ^\w +$ 或 ^\w{3, 20}$
中文、英文、数字包括下划线                                           ^[\u4E00 -\u9FA5A - Za - z0 - 9_]+$
中文、英文、数字但不包括下划线等符号                                  ^[\u4E00 -\u9FA5A - Za - z0 -9]+$ 或 ^[\u4E00 -\u9FA5A - Za - z0 - 9]{2, 20}$
可以输入含有                                                  ^% & ',;=?$\"等字符[ ^ % & ',;=?$\x22]+
禁止输入含有~的字符                                              [^~\x22]+
'''
